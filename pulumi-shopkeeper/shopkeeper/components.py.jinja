{# 
ðŸ¦¾ Jinja template for generating Shopkeeper Component Resources

Requires:
 - market_backends: [{component_module: str, args_type_name: str}]

#}
#
# DO NOT EDIT! Code is generated by component_factory.py

from typing import Any, Optional, Type
import inspect

from pulumi import ComponentResource, Output, ResourceOptions
from shopkeeper import backend_factory

{% for module, object in imports.items() %}
from {{ module }} import {{ object|join(', ') }}
{% endfor %}

{% for component in components %}
class {{component.name}}(ComponentResource):
    market_data: Output[Any]

    def __init__(
        self,
        name: str,
        args: {{component.args_type}},
        opts: Optional[ResourceOptions] = None,
    ):
        super().__init__(
            "pulumi-shopkeeper:index:{{component.name}}",
            name,
            props={},
            opts=opts,
        )
        
        # play it safe for now
        if inspect.isawaitable(args):
            raise NotImplementedError(
                "Input dependencies not yet implemented, no idea what it will do."
            )
        
        # ensure that parent is passed through
        opts = ResourceOptions.merge(ResourceOptions(parent=self), opts)

        # declare the market backend
        Backend = backend_factory.get_market_backend(args.backend_type)
        self.market_data = Backend.declare_market(
            name=name,
            backend_declaration=args,
        )

        self.register_outputs({"marketData": self.market_data})


{% endfor %}

components : list = [
{% for component in components %}
    {{ component.name }},
{% endfor %}
]